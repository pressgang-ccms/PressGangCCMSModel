package org.jboss.pressgang.ccms.model;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PreRemove;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.envers.Audited;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.jboss.pressgang.ccms.model.base.AuditedEntity;
import org.jboss.pressgang.ccms.model.constants.Constants;
import org.jboss.pressgang.ccms.model.validator.NotBlank;

/**
 * User generated by hbm2java
 */
@Entity
@Audited
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)
@Table(name = "User", uniqueConstraints = @UniqueConstraint(columnNames = {"UserName"}))
public class User extends AuditedEntity implements java.io.Serializable {
    private static final long serialVersionUID = -1745432150593137619L;
    public static final String SELECT_ALL_QUERY = "select user from User user";

    private Integer userId;
    private String userName;
    private String description;
    private Set<UserRole> userRoles = new HashSet<UserRole>(0);

    public User() {
    }

    public User(final String userName) {
        this.userName = userName;
    }

    public User(final String userName, final String description, final Set<UserRole> userRoles) {
        this.userName = userName;
        this.description = description;
        this.userRoles = userRoles;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "UserID", unique = true, nullable = false)
    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "UserName", nullable = false, length = 255)
    @NotNull
    @NotBlank
    @Length(max = 255)
    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Column(name = "Description", columnDefinition = "TEXT")
    @Length(max = 65535)
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user",
            cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, orphanRemoval = true)
    @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)
    @BatchSize(size = Constants.DEFAULT_BATCH_SIZE)
    public Set<UserRole> getUserRoles() {
        return userRoles;
    }

    public void setUserRoles(final Set<UserRole> userRoles) {
        this.userRoles = userRoles;
    }

    @Transient
    public boolean isInRole(final Role role) {
        if (role == null) return false;

        return isInRole(role.getRoleId());
    }

    @Transient
    public boolean isInRole(final Integer role) {
        for (final UserRole userRole : userRoles) {
            if (userRole.getRole().getRoleId().equals(role)) return true;
        }

        return false;
    }

    public void addRole(final Role role) {
        if (!isInRole(role)) {
            final UserRole userRole = new UserRole(this, role);
            getUserRoles().add(userRole);
            role.getUserRoles().add(userRole);
        }
    }

    public void removeRole(final Role role) {
        removeRole(role.getRoleId());
    }

    public void removeRole(final Integer roleId) {
        for (final UserRole userRole : userRoles) {
            if (userRole.getRole().getRoleId().equals(roleId)) {
                getUserRoles().remove(userRole);
                userRole.getRole().getUserRoles().remove(userRole);
                break;
            }
        }
    }

    @Transient
    public String getUserRolesCommaSeperatedList() {
        String retValue = "";
        for (final UserRole role : userRoles) {
            if (retValue.length() != 0) retValue += ", ";
            retValue += role.getRole().getRoleName();
        }
        return retValue;
    }

    @PreRemove
    private void preDelete() {
        userRoles.clear();
    }

    @Transient
    public List<Role> getRoles() {
        final List<Role> retValue = new ArrayList<Role>();
        for (final UserRole userRole : userRoles)
            retValue.add(userRole.getRole());
        return retValue;
    }

    @Override
    @Transient
    public Integer getId() {
        return userId;
    }

}
